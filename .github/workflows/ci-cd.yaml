name: React CI/CD with Docker and EKS

on:
  push:
    branches:
      - production

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_output: ${{ steps.build_output.outputs.path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: DISABLE_ESLINT_PLUGIN=true npm run build

      - name: Upload build output
        id: build_output
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/

  version:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.version.outputs.NEW_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          # Get the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")

          # Extract version numbers
          MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')

          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Version will be: $NEW_TAG"

      - name: Create and push Git tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a ${{ steps.version.outputs.NEW_TAG }} -m "Release ${{ steps.version.outputs.NEW_TAG }}"
          git push origin ${{ steps.version.outputs.NEW_TAG }}

  docker:
    needs: [build, version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}/front-test:${{ needs.version.outputs.new_tag }} .
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/front-test:${{ needs.version.outputs.new_tag }}

  deploy:
    needs: [docker, version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0
          ref: production
          clean: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Cleanup old ArgoCD Applications
        run: |
          kubectl delete application frontend-app -n argocd --ignore-not-found=true
          kubectl delete application root-app -n argocd --ignore-not-found=true --force --grace-period=0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy Applications
        run: |
          # Create values override file for apps chart
          cat > helm/apps/values.yaml << EOF
          repoURL: https://github.com/AWS-Cloud-FinalProject/frontend.git
          targetRevision: production
          frontend:
            image:
              repository: ${{ secrets.ECR_REPOSITORY_URI }}/front-test
              tag: ${{ needs.version.outputs.new_tag }}
          EOF

          # Create values file for frontend chart
          cat > helm/frontend/values.yaml << EOF
          replicaCount: 1

          image:
            repository: ${{ secrets.ECR_REPOSITORY_URI }}/front-test
            tag: ${{ needs.version.outputs.new_tag }}
            pullPolicy: Always

          service:
            type: LoadBalancer
            port: 80
          EOF

          # Debug: Show the generated values files
          echo "Generated helm/apps/values.yaml:"
          cat helm/apps/values.yaml
          echo "Generated helm/frontend/values.yaml:"
          cat helm/frontend/values.yaml

          # Apply the apps chart using Helm with debug output
          helm upgrade --install apps helm/apps -n argocd --create-namespace --debug
      
      - name: Cleanup old ReplicaSets
        run: |
          # Get all ReplicaSets except the latest one and delete them
          kubectl get replicaset -l app=frontend -o name | tail -n +2 | xargs -r kubectl delete