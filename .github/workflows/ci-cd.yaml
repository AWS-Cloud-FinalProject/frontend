name: React CI/CD with Docker and EKS

on:
  push:
    branches:
      - doyeon-action

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: DISABLE_ESLINT_PLUGIN=true npm run build

      - name: Generate version
        id: version
        run: |
          # Get the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")

          # Extract version numbers
          MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')

          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "Version will be: $NEW_TAG"

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}/front-test:${{ env.NEW_TAG }} .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/front-test:${{ env.NEW_TAG }}

      - name: Create and push Git tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a ${{ env.NEW_TAG }} -m "Release ${{ env.NEW_TAG }}"
          git push origin ${{ env.NEW_TAG }}

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0
          ref: doyeon-action
          clean: false

      - name: Get latest tag
        id: latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Update image tag in deployment
        run: |
          sed -i "s|\${ECR_REPOSITORY_URI}|${{ secrets.ECR_REPOSITORY_URI }}|g" k8s/frontend-deployment.yaml
          sed -i "s|\${IMAGE_TAG}|${{ env.LATEST_TAG }}|g" k8s/frontend-deployment.yaml

      - name: Git operations
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

          # Update local branch
          git fetch origin
          git checkout doyeon-action

          # Add and commit changes
          git add k8s/frontend-deployment.yaml
          git commit -m "Update deployment to version ${{ env.LATEST_TAG }}" || echo "No changes to commit"

          # Pull and rebase if needed
          git pull --rebase origin doyeon-action

          # Push changes
          git push origin doyeon-action

      - name: Deploy ArgoCD Applications
        run: |
          kubectl apply -f k8s/app-of-apps.yaml -n argocd
          kubectl apply -f k8s/frontend-application.yaml -n argocd
