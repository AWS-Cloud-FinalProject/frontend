name: React CI/CD with Docker and EKS

on:
  push:
    branches:
      - production

permissions:
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_output: ${{ steps.build_output.outputs.path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: DISABLE_ESLINT_PLUGIN=true npm run build

      - name: Upload build output
        id: build_output
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: build/

      - name: Upload Nginx config
        uses: actions/upload-artifact@v4
        with:
          name: nginx-config
          path: nginx.conf


  version:
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.version.outputs.NEW_TAG }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Generate version
        id: version
        run: |
          # Get the latest tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1` 2>/dev/null || echo "v0.0.0")

          # Extract version numbers
          MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/')
          MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/')
          PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/')

          # Get the commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Check commit message for version bump keywords
          if echo "$COMMIT_MSG" | grep -iE "BREAKING CHANGE|major" > /dev/null; then
            echo "Major version bump detected"
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif echo "$COMMIT_MSG" | grep -iE "feat|minor" > /dev/null; then
            echo "Minor version bump detected"
            MINOR=$((MINOR + 1))
            PATCH=0
          else
            echo "Patch version bump detected"
            PATCH=$((PATCH + 1))
          fi

          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "Version will be: $NEW_TAG"
          echo "Commit message: $COMMIT_MSG"

      - name: Create and push Git tag
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git tag -a ${{ steps.version.outputs.NEW_TAG }} -m "Release ${{ steps.version.outputs.NEW_TAG }}"
          git push origin ${{ steps.version.outputs.NEW_TAG }}

  docker:
    needs: [build, version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build output
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: build/

      - name: Download Nginx config  # Nginx 설정 파일 가져오기
        uses: actions/download-artifact@v4
        with:
          name: nginx-config
          path: .

      - name: Verify files  # 파일이 정상적으로 다운로드되었는지 확인
        run: ls -al

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}/frontend:${{ needs.version.outputs.new_tag }} .
          
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/frontend:${{ needs.version.outputs.new_tag }}
          docker push ${{ secrets.ECR_REPOSITORY_URI }}/frontend:latest

  deploy:
    needs: [docker, version]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0
          ref: production
          clean: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

      - name: Label EKS Nodes
        run: |
          echo "Getting nodes from front-node-group..."
          NODES=$(kubectl get nodes -l eks.amazonaws.com/nodegroup=front-node-group -o jsonpath='{.items[*].metadata.name}')

          if [ -z "$NODES" ]; then
            echo "No nodes found in front-node-group"
            exit 1
          fi

          echo "Found nodes: $NODES"
          for NODE in $NODES; do
            echo "Labeling node: $NODE"
            kubectl label nodes $NODE role=front-node-group --overwrite=true
          done

          # Verify node labels
          echo "Checking node labels:"
          kubectl get nodes --show-labels | grep front-node-group

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Deploy Applications
        run: |
          # Create values override file for apps chart
          cat > helm/apps/values.yaml << EOF
          repoURL: https://github.com/AWS-Cloud-FinalProject/frontend.git
          targetRevision: production
          frontend:
            image:
              repository: ${{ secrets.ECR_REPOSITORY_URI }}/frontend
              tag: ${{ needs.version.outputs.new_tag }}
          EOF

          # Create values file for frontend chart
          cat > helm/frontend/values.yaml << EOF
          replicaCount: 3

          image:
            repository: ${{ secrets.ECR_REPOSITORY_URI }}/frontend
            tag: ${{ needs.version.outputs.new_tag }}
            pullPolicy: Always

          service:
            type: LoadBalancer
            port: 80
          EOF

          # Debug: Show the generated values files
          echo "Generated helm/apps/values.yaml:"
          cat helm/apps/values.yaml
          echo "Generated helm/frontend/values.yaml:"
          cat helm/frontend/values.yaml

          # Apply the apps chart using Helm with debug output
          helm upgrade --install front-apps helm/apps -n argocd --create-namespace --wait --debug
   
      - name: Cleanup old ReplicaSets
        run: |
          # Get all old ReplicaSets except the latest one and delete them
          kubectl get rs --sort-by=.metadata.creationTimestamp -l app=frontend -o name | head -n -1 | xargs -r kubectl delete
