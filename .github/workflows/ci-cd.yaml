name: Python CI/CD with Docker and EKS

on:
  push:
    branches:
      - develop

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python "3.12"
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt 


      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY_URI }}:latest .  # 도커 이미지를 빌드하고 ECR URI에 태그 지정

      - name: Configure AWS Credentials  # AWS 자격 증명 설정 (필수)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1  # ECR에 로그인

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest  # 빌드한 도커 이미지를 ECR에 푸시

  deploy:
    runs-on: ubuntu-latest
    needs: build  # 빌드 작업이 끝난 후 배포 작업 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }}  # EKS 클러스터 이름을 이용해 kubeconfig 업데이트

      - name: Update image in frontend-deployment.yaml
        run: |
          sed -i 's|image: .*|image: ${{ secrets.ECR_REPOSITORY_URI }}/webtest:latest|' k8s/frontend-deployment.yaml

      - name: Deploy frontend to EKS
        run: |
          ls -l k8s/  # 디렉토리 내용 확인
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-service.yaml

      # 배포 상태 확인
      - name: Wait for rollout to finish
        run: |
          kubectl rollout status deployment/frontend-deployment